{"output": "TL;DR I built a social platform using React + GraphQL to drive scale that goes beyond traditional CRMs. READ THE UPDATE FOR MORE 1. Let's Talk Numbers 2. Fast, Beautiful, and XMPP Addendum\n <br> Have You Ever Wondered What Cross-Platform CRM Technology Would Look Like?\n <br> Imagine if you worked for a startup and all the teams that you built access to a private CRM, akin to the Encr line at Google that integrates with their internal email integration. You write code to schedule followups for your CX team and schedule virtually any type of project to be added to various teams. Even if you're just a little bit useless in retrospect the CRM program connects you to key knowledge in big database analytics. In the context of a startup you have a ton of internal access, but you require everyone on your team to have access to the CRM. You block access from some of your cross-platform apps to the CRM and you allow access to all of them. This allows the CRM to schedule follow-ups as needed for your core product.\n <br> Let's compare that to Docker and how everything is packaged. Let's say you're in an office building and your team uses individual computers or open-chaired small meeting rooms that use VMware stack. They have a VM on each of them. When needed, they pull in a VM and run their application locally or on AWS. No more clumsy cross-platform out-of-the-box experience, just development. If the company's CI lets them push code to the cloud, you \"set it and forget it.\" Paid artisan or Squarespace support reps can occasionally get complicating instructions by your most inexperienced developers, but no need for it any longer. This is great, but the value of cross-platform CRM even the easiest way to configure for each product/platform is as minimal as a single screen or email. You can't presume to challenge your team!\n <br> Say you built a commercial app that a Fortune 500 company uses on its Web DEV infrastructure. How do you set up a webSphere-based version? If you built the platform using Docker alone you would include middleware, such as Slowloris, Sonarr, and an AWS stack. These things add complexity, maintenance, and resource overhead that are prohibitively expensive. Full Stack app support only requires that you mix a Windows host with Docker, but what if the company uses a clustered, NFV-based cloud? Then again, you might not want an estimated cost of under $100K for the speed requirement and minimal availability, so you significantly compromise performance for reputation. If you're really on a tight budget (like we are) and don't mind the extra configuration requirements then you research and build a Docker cluster. With a cluster you can define and manage the command-line utilities, libraries, and security enable you to move on to something larger.\n <br> In this world of Cross-Platform CRM, the solution is to distill it to what I'd call the Docker + WebFC layer. The Docker + WebDB framework interfaces your Docker containerized and Cache Engine-backed app to a CouchDB database, Postgresql database, or RabbitMQ connection. This layer can easily hold all of your app-specific databases. All discussions about tools like MySQL or SQLAlchemy fade away because there are just no general frameworks for blockchain applications. Unless your team builds in a separate database for a single team, there's no need to reinvent the wheel. Generally you need to create just enough redundancy that a failure or software malfunction doesn't destroy your file system and database. Before setting out to build a platform like this, ask yourself a simple question: am I planning to build a distributed DB? If not, skip here.\n <br> We have spent the last eight years building and growing Nostalrius. In that time we have developed dozens of online games, places2play and Open Commmerce among them, have hosted more than 1000 servers at massive cons, been to 2 +4 multi-player consoles LAN, the Dev Stream London, and live streamed video game events to 7 countries. In 2015 there was no real industry consensus that games-development platform was the next pillar. All the schools had different opinions, everyone was pitching your toys. Different people made different payments, and there were people insisting on a certain model. It really wasn't a market place of innovation in 2015. The various incumbent platforms had tremendous success, and make no mistake the market tech was helped immensely by companies like GoG and PlayFire building and appropriating their platforms' assets.\n <br> By mid-2015, it was clear I didn't have to change my mind and with my salary and product ownership tied to an and/or community built platform I decided to build it. I'd grown tired of being blamed if something didn't work (wouldn't work), since concerns were raised that it wouldn't work because it didn't work. Plus, once you've taken that hit you tend\n <br>"}